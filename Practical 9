import uulib.Console;

public class Main {

    // ============= question 1 ===============
    public static String getCoinValue(int coin) {
        // Setting the default to invalid consideration was made to use a switch method.
        String CurrenyValue = "invalid " + coin;
        // Checking what is enetered and outputting the result
        if (coin == 1) {
            CurrenyValue = "one penny";
        } else if (coin == 2) {
            CurrenyValue = "two pence";
        } else if (coin == 5) {
            CurrenyValue = "five pence";
        } else if (coin == 10) {
            CurrenyValue = "ten pence";
        } else if (coin == 20) {
            CurrenyValue = "twenty pence";
        } else if (coin == 50) {
            CurrenyValue = "fifty pence";
        } else if (coin == 100) {
            CurrenyValue = "one pound";
        } else if (coin == 200) {
            CurrenyValue = "two pounds";
        }
        return CurrenyValue;
    }

    public static void question1() {
        final int SENTINEL = 0;
        // Asking user for input
        int coin = Console.getInt("coin (0 to quit): ");
        while (coin != SENTINEL) {
            System.out.println(getCoinValue(coin));
            coin = Console.getInt("coin (0 to quit): ");
        }
    }

    // ============= question 2 ===============

    // part a.
    public static void drawLine(int length, char c) {
        for (int A = 0; A < length; A = A + 1) {
            System.out.print(c);
        }
    }

    // part b.
    public static void drawTriangle(int height) {
        int star = 1, spaces = height - 1;
        for (int A = 0; A < height; A = A + 1) {
            drawLine(spaces, ' ');
            drawLine(star, '*');
            drawLine(spaces, ' ');
            System.out.print("\n");
            star = star + 2;
            spaces = spaces - 1;
        }
    }

    // part d. return string of specified length using character c
    public static String makeLine(int length, char c) {
        String line = "";
        for (int A = 0; A < length; A = A + 1) {
            line = line + c;
        }
        return line;
    }

    // part d. return string of equilateral triangle of specified height
    public static String makeTriangle(int height) {
        int star = 1, spaces = height - 1;
        String triangle = "";
        for (int A = 0; A < height; A = A + 1) {
            triangle += makeLine(spaces, ' ');
            triangle += makeLine(star, '*');
            triangle += makeLine(spaces, ' ') + "\n";
            star = star + 2;
            spaces = spaces - 1;
        }
        return triangle;
    }
    // part c.
    public static void question2() {
        int inputHeight = Console.getInt("Height of the triangle?: ");
        while (inputHeight != 0) {
            System.out.println(makeTriangle(inputHeight));
            inputHeight = Console.getInt("Height of the triangle?: ");
        }
    }
    // main method - program execution starts here
    public static void main(String[] args) {

         //question1();
        //question2();

        // optional question contained in the BMI class
         BMI.question3_optional();
    }

}
// QUESTION 3 anser starts here but must be executed in a seperate file:
// question 3 has been moved to a separate class to
// a. reduce complexity of the Main class by removing the optional question
// b. show how we can organise our code in separate classes

import uulib.Console;

public class BMI {

    // =========== question 3 optional ================

    // return bmi value or 0 if weight or height are <= 0
    public static double calcBMI(double weight, double height) { 
       // replace return statement below with your algorithm
        if (weight <= 0 || height <= 0) {
         return 0;
    } else {
        double bmi = weight / (height * height);
        return bmi;
        // or alternately simply return expression result
        // return weight / (height * height); 
    }
}
    // return string representation of the bmi value “normal”, “overweight”, “underweight” or “invalid” if the bmi is 0
    public static String getBMIResult(double bmi) {
        final int UNDER = 20, OVER = 30;       

    // now return the string result based on the bmi value
    if (bmi == 0) {
         return "invalid";
    } else if (bmi < UNDER) {
        return "underweight";
    } else if (bmi > OVER) {
        return "overweight";
    } else {
        return "normal";
    }
}
    // question 3
    public  static void question3_optional() {
        int option = Console.getInt("0-test plan 1-Calc BMI: ");
        if (option == 0) {
      testPlan();
   } else {
      double weight = Console.getDouble("enter weight: ");
      double height = Console.getDouble("enter height: ");
      double bmi =  calcBMI(weight, height);
      String bmiResult = getBMIResult(bmi);
      System.out.println("BMI Result is " + bmiResult);   
   } 
}
    // =============================================================================================
    // =========== Following methods allow us to test our BMI value methods defined above ==========

    // test plan action method to verify methods work correctly
    public static void testPlan() {
        bmiTest(60.0, 1.75, "underweight");    
        bmiTest(51.5, 1.6,  "normal");         
        bmiTest(102.0, 1.8, "overweight");  
        bmiTest(97.5, 1.9,  "normal");  
        bmiTest(-200.0, 2.0,"invalid"); 
        bmiTest(167, -1.4,  "invalid");
    }
    
    // test bmi using supplied weight & height and check that generated result
    // matches the expectedResult (overweight, underweight, normal or invalid)
    public static void bmiTest(double weight, double height, String expectedResult) {
        double bmi    = calcBMI(weight, height);    // calculate the bmi
        String result = getBMIResult(bmi);          // generate the string result of bmi

        // we must use .equals to test string equality (== does not work on strings)
        if (result.equals(expectedResult)) {
           System.out.println("Success - " + bmi + " " + expectedResult);
        } else {
           System.out.println("FAILURE - " + bmi + " " + expectedResult); 
        }
    }

}
